
.top
  .postTitle
    .small
      = @review.user.nickname
      さんの投稿
    = @review.title
  .postDate
    = @review.created_at.strftime("%Y-%m-%d %H:%M")
  .postAuthor
  - if user_signed_in? && current_user.id == @review.user_id
    .postManage
      = link_to "編集", edit_review_path(@review.id), class: "postManage__edi"
      = link_to "削除", review_path(@review.id), method: :delete, class: "postManage__delete"
  .postText
    = simple_format @review.text
  -# = render partial: 'likes/like', collection: @reviews, as: :review
  -# %h3
  -#   いいね件数: 
  -#   = @review.likes.count
  -# - if current_user.already_liked?(@review)
  -#   = button_to 'いいねを取り消す', review_like_path(@review), method: :delete, remote: true 
  -# - else
  -#   = button_to 'いいね', review_likes_path(@review), remote: true 

  -# %h2 いいねしたユーザー
  -# - @review.liked_users.each do |user|
  -#   = link_to user.nickname, user_path(user)
  = render "likes/like"

  .comment
    - if current_user 
      .content__title
        コメントを追加する
      = form_with url: review_comments_path(@review.id), class: :form, local: true do |f|
        = f.text_field :comment, placeholder: :コメント, class: :form__title
        = f.submit '投稿する',class: :form__btn
    - @review.comments.each do |comment|
      .tt
        - if current_user.id == comment.user_id
          .jiji
            = link_to "削除", review_comments_path(comment), method: :delete, class: "postManage__edit"
          -# = link_to "編集", edit_review_comments_path(comment), class: "postManage__edit"
        .nickname
          = comment.user.nickname
        .comment
          = comment.comment
- if current_user.id == @review.user_id
  .locked
    %button 表示非表示

.mm
  非表示解除
